{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/GitHub/PMCStorybook/src/component/Common/Button.js\";\nimport React, { useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { ColorApp, FontText, ButtonType, ButtonState } from \"../index\";\nimport Icon from \"@expo/vector-icons/Feather\";\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: ColorApp.PRIMARY.blue_04,\n    width: \"100%\",\n    height: 54,\n    borderRadius: 12,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"row\"\n  },\n  textStyle: {\n    color: ColorApp.NEUTRAL.gray_07,\n    marginHorizontal: 2\n  }\n});\nvar BUTTON_COLOR = {\n  DEFAULT_BUTTON_COLOR: ColorApp.PRIMARY.blue_04,\n  ACTIVE_BUTTON_COLOR: ColorApp.PRIMARY.blue_05,\n  DISABLE_BUTTON_COLOR: ColorApp.NEUTRAL.gray_02\n};\n\nfunction Button(props) {\n  var customStyle = props.customStyle,\n      customTextStyle = props.customTextStyle,\n      name = props.name,\n      onPress = props.onPress,\n      _props$type = props.type,\n      type = _props$type === void 0 ? ButtonType.DEFAULT : _props$type,\n      _props$state = props.state,\n      state = _props$state === void 0 ? ButtonState.DEFAULT : _props$state,\n      _props$iconColor = props.iconColor,\n      iconColor = _props$iconColor === void 0 ? \"black\" : _props$iconColor,\n      _props$enableButtonLe = props.enableButtonLeft,\n      enableButtonLeft = _props$enableButtonLe === void 0 ? false : _props$enableButtonLe,\n      _props$enableButtonRi = props.enableButtonRight,\n      enableButtonRight = _props$enableButtonRi === void 0 ? false : _props$enableButtonRi,\n      _props$customLeftComp = props.customLeftComponent,\n      customLeftComponent = _props$customLeftComp === void 0 ? null : _props$customLeftComp,\n      _props$customRightCom = props.customRightComponent,\n      customRightComponent = _props$customRightCom === void 0 ? null : _props$customRightCom,\n      _props$leftIconName = props.leftIconName,\n      leftIconName = _props$leftIconName === void 0 ? \"chevron-left\" : _props$leftIconName,\n      _props$rightIconName = props.rightIconName,\n      rightIconName = _props$rightIconName === void 0 ? \"chevron-right\" : _props$rightIconName;\n  useEffect(function () {}, []);\n\n  var getButtonColor = function getButtonColor() {\n    switch (state) {\n      case ButtonState.ACTIVE:\n        return BUTTON_COLOR.ACTIVE_BUTTON_COLOR;\n\n      case ButtonState.DISABLE:\n        return BUTTON_COLOR.DISABLE_BUTTON_COLOR;\n\n      default:\n        return BUTTON_COLOR.DEFAULT_BUTTON_COLOR;\n    }\n  };\n\n  var defaultButtonStyle = {\n    backgroundColor: getButtonColor()\n  };\n  var ghostButtonStyle = {\n    backgroundColor: \"white\",\n    borderWidth: 1,\n    borderColor: getButtonColor()\n  };\n  var buttonStyle = [styles.container, type == ButtonType.GHOST ? ghostButtonStyle : defaultButtonStyle, customStyle != null ? customStyle : {}];\n  var defaultTextStyle = {\n    color: \"white\"\n  };\n  var ghostTextStyle = {\n    color: getButtonColor()\n  };\n  var textStyle = [styles.textStyle, type == ButtonType.GHOST ? ghostTextStyle : defaultTextStyle, customTextStyle != null ? customTextStyle : {}];\n  return React.createElement(View, {\n    opacity: state == ButtonState.DISABLE ? 0.8 : 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: [buttonStyle],\n    onPress: state == ButtonState.DISABLE ? null : onPress,\n    activeOpacity: state == ButtonState.DISABLE ? 1 : 0.2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, customLeftComponent ? customLeftComponent : null, enableButtonLeft ? React.createElement(Icon, {\n    name: leftIconName,\n    color: iconColor,\n    size: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }) : null, React.createElement(FontText.Button1, {\n    style: textStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, name), enableButtonRight ? React.createElement(Icon, {\n    name: rightIconName,\n    color: iconColor,\n    size: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }) : null, customRightComponent ? customRightComponent : null));\n}\n\nexport default Button;","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/PMCStorybook/src/component/Common/Button.js"],"names":["React","useEffect","ColorApp","FontText","ButtonType","ButtonState","Icon","styles","StyleSheet","create","container","backgroundColor","PRIMARY","blue_04","width","height","borderRadius","justifyContent","alignItems","flexDirection","textStyle","color","NEUTRAL","gray_07","marginHorizontal","BUTTON_COLOR","DEFAULT_BUTTON_COLOR","ACTIVE_BUTTON_COLOR","blue_05","DISABLE_BUTTON_COLOR","gray_02","Button","props","customStyle","customTextStyle","name","onPress","type","DEFAULT","state","iconColor","enableButtonLeft","enableButtonRight","customLeftComponent","customRightComponent","leftIconName","rightIconName","getButtonColor","ACTIVE","DISABLE","defaultButtonStyle","ghostButtonStyle","borderWidth","borderColor","buttonStyle","GHOST","defaultTextStyle","ghostTextStyle"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { View, StyleSheet, TouchableOpacity } from \"react-native\";\nimport { ColorApp, FontText, ButtonType, ButtonState } from \"../index\";\nimport Icon from \"react-native-vector-icons/Feather\";\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: ColorApp.PRIMARY.blue_04,\n    width: \"100%\",\n    height: 54,\n    borderRadius: 12,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"row\",\n  },\n  textStyle: {\n    color: ColorApp.NEUTRAL.gray_07,\n    marginHorizontal: 2,\n  },\n});\n\nconst BUTTON_COLOR = {\n  DEFAULT_BUTTON_COLOR: ColorApp.PRIMARY.blue_04,\n  ACTIVE_BUTTON_COLOR: ColorApp.PRIMARY.blue_05,\n  DISABLE_BUTTON_COLOR: ColorApp.NEUTRAL.gray_02,\n};\n\nfunction Button(props) {\n  const {\n    customStyle,\n    customTextStyle,\n    name,\n    onPress,\n    type = ButtonType.DEFAULT,\n    state = ButtonState.DEFAULT,\n    iconColor = \"black\",\n    enableButtonLeft = false,\n    enableButtonRight = false,\n    customLeftComponent = null,\n    customRightComponent = null,\n    leftIconName = \"chevron-left\",\n    rightIconName = \"chevron-right\",\n  } = props;\n  useEffect(() => {}, []);\n  const getButtonColor = () => {\n    switch (state) {\n      case ButtonState.ACTIVE:\n        return BUTTON_COLOR.ACTIVE_BUTTON_COLOR;\n      case ButtonState.DISABLE:\n        return BUTTON_COLOR.DISABLE_BUTTON_COLOR;\n      default:\n        return BUTTON_COLOR.DEFAULT_BUTTON_COLOR;\n    }\n  };\n  const defaultButtonStyle = { backgroundColor: getButtonColor() };\n  const ghostButtonStyle = {\n    backgroundColor: \"white\",\n    borderWidth: 1,\n    borderColor: getButtonColor(),\n  };\n  const buttonStyle = [\n    styles.container,\n    type == ButtonType.GHOST ? ghostButtonStyle : defaultButtonStyle,\n    customStyle ?? {},\n  ];\n\n  const defaultTextStyle = { color: \"white\" };\n  const ghostTextStyle = {\n    color: getButtonColor(),\n  };\n  const textStyle = [\n    styles.textStyle,\n    type == ButtonType.GHOST ? ghostTextStyle : defaultTextStyle,\n    customTextStyle ?? {},\n  ];\n  return (\n    <View opacity={state == ButtonState.DISABLE ? 0.8 : 1}>\n      <TouchableOpacity\n        style={[buttonStyle]}\n        onPress={state == ButtonState.DISABLE ? null : onPress}\n        activeOpacity={state == ButtonState.DISABLE ? 1 : 0.2}\n      >\n        {customLeftComponent ? customLeftComponent : null}\n        {enableButtonLeft ? (\n          <Icon name={leftIconName} color={iconColor} size={24} />\n        ) : null}\n        <FontText.Button1 style={textStyle}>{name}</FontText.Button1>\n        {enableButtonRight ? (\n          <Icon name={rightIconName} color={iconColor} size={24} />\n        ) : null}\n        {customRightComponent ? customRightComponent : null}\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}