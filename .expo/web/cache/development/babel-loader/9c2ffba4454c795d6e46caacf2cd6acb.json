{"ast":null,"code":"import tokensToAST from \"./util/tokensToAST\";\nimport { stringToTokens } from \"./util/stringToTokens\";\nimport { cleanupTokens } from \"./util/cleanupTokens\";\nimport groupTextTokens from \"./util/groupTextTokens\";\nimport omitListItemParagraph from \"./util/omitListItemParagraph\";\nexport default function parser(source, renderer, markdownIt) {\n  if (Array.isArray(source)) {\n    return renderer(source);\n  }\n\n  var tokens = stringToTokens(source, markdownIt);\n  tokens = cleanupTokens(tokens);\n  tokens = groupTextTokens(tokens);\n  tokens = omitListItemParagraph(tokens);\n  var astTree = tokensToAST(tokens);\n  return renderer(astTree);\n}","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/PMCStorybook/node_modules/react-native-markdown-display/src/lib/parser.js"],"names":["tokensToAST","stringToTokens","cleanupTokens","groupTextTokens","omitListItemParagraph","parser","source","renderer","markdownIt","Array","isArray","tokens","astTree"],"mappings":"AAAA,OAAOA,WAAP;AACA,SAAQC,cAAR;AACA,SAAQC,aAAR;AACA,OAAOC,eAAP;AACA,OAAOC,qBAAP;AASA,eAAe,SAASC,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,UAAlC,EAA8C;AAC3D,MAAIC,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAJ,EAA2B;AACzB,WAAOC,QAAQ,CAACD,MAAD,CAAf;AACD;;AAED,MAAIK,MAAM,GAAGV,cAAc,CAACK,MAAD,EAASE,UAAT,CAA3B;AACAG,EAAAA,MAAM,GAAGT,aAAa,CAACS,MAAD,CAAtB;AACAA,EAAAA,MAAM,GAAGR,eAAe,CAACQ,MAAD,CAAxB;AACAA,EAAAA,MAAM,GAAGP,qBAAqB,CAACO,MAAD,CAA9B;AAEA,MAAMC,OAAO,GAAGZ,WAAW,CAACW,MAAD,CAA3B;AAEA,SAAOJ,QAAQ,CAACK,OAAD,CAAf;AACD","sourcesContent":["import tokensToAST from './util/tokensToAST';\nimport {stringToTokens} from './util/stringToTokens';\nimport {cleanupTokens} from './util/cleanupTokens';\nimport groupTextTokens from './util/groupTextTokens';\nimport omitListItemParagraph from './util/omitListItemParagraph';\n\n/**\n *\n * @param {string} source\n * @param {function} [renderer]\n * @param {AstRenderer} [markdownIt]\n * @return {View}\n */\nexport default function parser(source, renderer, markdownIt) {\n  if (Array.isArray(source)) {\n    return renderer(source);\n  }\n\n  let tokens = stringToTokens(source, markdownIt);\n  tokens = cleanupTokens(tokens);\n  tokens = groupTextTokens(tokens);\n  tokens = omitListItemParagraph(tokens);\n\n  const astTree = tokensToAST(tokens);\n\n  return renderer(astTree);\n}\n"]},"metadata":{},"sourceType":"module"}